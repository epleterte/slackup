#!/usr/bin/env python
# Copyright Christian Bryn 2016-2017 <chr.bryn@gmail.com>

#if python.ver == '2':
from __future__ import print_function
#import fileinput
import argparse
import socket
import sys
#import json
import os
import yaml
import logging

from slackclient import SlackClient

class SlackUp():
    """ Wrapper around SlackClient """
    def __init__(self, config):
        loglevel = 'warning'
        loglevel_numeric = getattr(logging, loglevel.upper(), None)
        if not isinstance(loglevel_numeric, int):
            raise ValueError('Invalid log level: %s' % loglevel)
        logging.basicConfig(level=loglevel_numeric)
        ## config defaults
        self.cfg = {
            'slack_token': '',
            'slack_channel': '#general',
            'slack_username': 'slackup',
            'slack_emoji': ':robot_face:'
        }

        ## read config from config file
        config_path = os.path.expanduser("~/.slackup.yml")
        if not os.path.exists(config_path):
            config_path = "/etc/slackup.yml"
        if os.path.exists(config_path):
            if oct(os.stat(config_path).st_mode)[-4:] != '0644':
                print('%s does not have the correct permissions - should be 0644' % (config_path))
                sys.exit(1)
            with open(config_path, 'r') as ymlfile:
                yml = yaml.load(ymlfile)
                # merge config:
                self.cfg.update(yml)
        else:
            # XXX: this is not true since we continue to pick up config:
            print('no config file found at %s, using defaults' % config_path)

        ## read config from environment
        if 'SLACK_TOKEN' in os.environ:
            self.cfg['slack_token'] = os.environ['SLACK_TOKEN']
        if 'SLACK_CHANNEL' in os.environ:
            self.cfg['slack_channel'] = os.environ['SLACK_CHANNEL']
        if 'SLACK_USERNAME' in os.environ:
            self.cfg['slack_username'] = os.environ['SLACK_USERNAME']
        if 'SLACK_EMOJI' in os.environ:
            self.cfg['slack_emoji'] = os.environ['SLACK_EMOJI']
        if 'SLACK_MESSAGE' in os.environ:
            self.cfg['slack_message'] = os.environ['SLACK_MESSAGE']

        ## finally, read config passed directly on invocation of class
        if config:
            self.cfg.update(config)

        if not self.cfg['slack_channel'].startswith('#'):
            self.cfg['slack_channel'] = '#' + self.cfg['slack_channel']


        ## validate config:
        # XXX: Improve this
        if not self._validate():
            print('Missing config options - bailing')
            raise ValueError
        self.slack = SlackClient(self.cfg['slack_token'])

    def _validate(self):
        if self.cfg['slack_token'] == '':
          return False
        if self.cfg['slack_channel'] == '':
          return False
        return True
    def post(self, message):
        """ Post to slack with current config """
        response = self.slack.api_call(
            "chat.postMessage", channel=self.cfg['slack_channel'], text=message,
            username=self.cfg['slack_username'], icon_emoji=self.cfg['slack_emoji']
        )
        if 'ok' in response:
            if response['ok']:
              return True
            else:
              logging.error("Error sending message: %s" % (response['error']))
              return False
        else:
            return False
    def post_attachment(self, message):
        """ Post to slack with 'message' as attachment with current config """
        response = self.slack.api_call(
            "chat.postMessage", channel=self.cfg['slack_channel'], attachments=[{"text": message}],
            username=self.cfg['slack_username'], icon_emoji=self.cfg['slack_emoji']
        )
        if 'ok' in response:
            if response['ok']:
              return True
            else:
              logging.error("Error sending message: %s" % (response['error']))
              return False
        else:
            return False

def main():
    """ Main routine - parses command line and posts to Slack """

    cfg = {}
    parser = argparse.ArgumentParser()

    #parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
    parser.add_argument("-v", "--verbose", help="increase output verbosity", action="count")
    parser.add_argument("-c", "--channel", help="specify channel to post to")
    parser.add_argument("-t", "--token", help="set token to use")
    #parser.add_argument("-t", "--prefix", nargs='?', const="[ %s ] " % (socket.getfqdn()), help="Prefix - default is the local hostname. Use with no argument for no prefix.", default="")
    parser.add_argument("-u", "--username", help="set Slack username to post as")
    parser.add_argument("-s", "--snippet", help="Post message as attachment/snippet", action="store_true")
    #parser.add_argument("-m", "--message", help="message to post to slack")
    #parser.add_argument("-f", "--file", nargs='?', type=argparse.FileType('r'), default=sys.stdin, help="read message from file or stdin")
    #parser.add_argument("-f", "--file", type=argparse.FileType('r'), default=sys.stdin, help="read message from file or stdin")
    parser.add_argument("-f", "--file", type=argparse.FileType('r'), help="read message from file or stdin")
    #parser.add_argument("message", nargs='?', type=argparse.FileType('r'), default=sys.stdin, help="message to post to slack")
    parser.add_argument("message", nargs='?', default=None, help="message to post to slack")

    args = parser.parse_args()

    if args.verbose:
        print("verbosity turned on")
    if args.channel:
        cfg['slack_channel'] = args.channel
    if args.token:
        cfg['slack_token'] = args.token
    if args.file:
        args.message = args.file.read()
    if not args.message:
        print("No message supplied!")
        sys.exit(1)

    #if cfg['slack_channel'] == '':
    #    print("No channel given!")
    #    sys.exit(1)
    #if cfg['slack_token'] == '':
    #    print("No token supplied!")
    #    sys.exit(1)

    hostname = socket.getfqdn()
    #print(args.message.type)
    print(args.message)
    message = "[ %s ] %s" % (hostname, args.message)
    #message = "[ %s ] %s" % (hostname, args.message.read())

    slack = SlackUp(cfg)

    if args.snippet:
        if not slack.post_attachment(message):
            print("Error: Failed to post message")
            sys.exit(1)
    else:
        if not slack.post(message):
            print("Error: Failed to post message")
            sys.exit(1)

if __name__ == "__main__":
    main()
